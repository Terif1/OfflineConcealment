namespace OfflineConcealment
{
    public class DefaultModulesValues
    {
        public static string Refining = "using System.Collections.Generic;\nusing Sandbox.Game.Entities;\nusing Sandbox.Game.Entities.Cube;\nusing VRageMath;\n\nnamespace OfflineConcealment.DefaultModules\n{\n    public class OfflineRefining : ConcealmentModule\n    {\n        //Defines values related to the module. ALL MUST HAVE SOME VALUE\n        public OfflineRefining()\n        {\n            Name = \"OfflineRefining\";\n            Enabled = false;\n            AreaLocked = false;\n            Areas = new List<BoundingSphereD>();\n            returnOnCheck = \"Your grid will not conceal due to having an active refinery\";\n        }\n        \n        //Checks for each grid. true = continue and conceal, false = exclude\n        public override bool GridCheck(MyCubeGrid grid)\n        {\n            return true;\n        }\n\n        //Checks for each block. true = continue and conceal, false = exclude\n        public override bool BlockCheck(MyCubeBlock block)\n        {\n            if (block is MyProductionBlock producer && producer.IsProducing)\n            {\n                return false;\n            }\n            return true;\n        }\n    }\n}";

        public static string Subtypes =
            "using System.Collections.Generic;\nusing Sandbox.Game.Entities;\nusing Sandbox.Game.Entities.Cube;\nusing VRageMath;\n\nnamespace OfflineConcealment.DefaultModules\n{\n    public class ExcludedSubtypes : ConcealmentModule\n    {\n        //you can define any value here\n        public List<string> ExcludedSubtypeList = new List<string>(new []\n        {\n            \"AdminBlock\",\n            \"SuperRefinery\"\n        });\n        //Defines values related to the module. ALL MUST HAVE SOME VALUE\n        public ExcludedSubtypes()\n        {\n            Name = \"Excluded Subtypes\";\n            Enabled = false;\n            AreaLocked = false;\n            Areas = new List<BoundingSphereD>();\n            returnOnCheck = \"Your grid will not conceal due to having a block with a subtype set to keep it unconcealed\";\n        }\n        \n        //Checks for each grid. true = continue and conceal, false = exclude\n        public override bool GridCheck(MyCubeGrid grid)\n        {\n            return true;\n        }\n\n        //Checks for each block. true = continue and conceal, false = exclude\n        public override bool BlockCheck(MyCubeBlock block)\n        {\n            if (block.DefinitionId != null && ExcludedSubtypeList.Contains(block.DefinitionId.Value.SubtypeId.String))\n            {\n                return false;\n            }\n            return true;\n        }\n    }\n}";

        public static string Factions =
            "using System.Collections.Generic;\nusing Sandbox.Game.Entities;\nusing Sandbox.Game.World;\nusing VRageMath;\n\nnamespace OfflineConcealment.DefaultModules\n{\n    \n    /// <summary>\n    /// Intended for excluding your npc factions\n    /// also useful for those who...convince you\n    /// </summary>\n    public class ExcludedFactions : ConcealmentModule\n    {\n        //you can define any value here\n        public List<string> ExcludedFactionTagsList = new List<string>(new []\n        {\n            \"SPRT\",\n            \"SPDR\"\n        });\n        //Defines values related to the module. ALL MUST HAVE SOME VALUE\n        public ExcludedFactions()\n        {\n            Name = \"ExcludedFactions\";\n            Enabled = false;\n            AreaLocked = false;\n            Areas = new List<BoundingSphereD>();\n            returnOnCheck = \"Your grid will not conceal due to being owned by an excluded faction\";\n        }\n        \n        //Checks for each grid. true = continue and conceal, false = exclude\n        public override bool GridCheck(MyCubeGrid grid)\n        {\n            var faction = MySession.Static.Factions.GetPlayerFaction(grid.BigOwners[0]);\n            if (faction != null && ExcludedFactionTagsList.Contains(faction.Tag))\n            {\n                return false;\n            }\n            return true;\n        }\n\n        //Checks for each block. true = continue and conceal, false = exclude\n        public override bool BlockCheck(MyCubeBlock block)\n        {\n            return true;\n        }\n    }\n}";

        public static string Logic =
            "using Sandbox.Game.Entities;\n\nnamespace OfflineConcealment.DefaultModules\n{\n    public class ConcealmentLogic : IConcealmentLogic\n    {\n        public void OnReveal(MyCubeGrid grid)\n        {\n            ;\n        }\n\n        public void OnConceal(MyCubeGrid grid)\n        {\n            ;\n        }\n    }\n}";
    }
}